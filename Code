# Creating Model
myInput = layers.Input(shape=(30,3,3,1))
conv1 = layers.TimeDistributed(layers.Conv2D(filters = 16, kernel_size = (1,3), activation='relu', padding='same', data_format = 'channels_last'))(myInput)
conv2 = layers.TimeDistributed(layers.Conv2D(filters = 16, kernel_size = (1,3), activation='relu', padding='same', data_format = 'channels_last'))(conv1)
conv3 = layers.TimeDistributed(layers.Conv2D(filters = 16, kernel_size = (1,3), activation='relu', padding='same', data_format = 'channels_last'))(conv2)
conv4 = layers.TimeDistributed(layers.Conv2D(filters = 16, kernel_size = (1,3), activation='relu', padding='same', data_format = 'channels_last'))(conv3)

flat = layers.TimeDistributed(layers.Flatten())(conv4)

LSTM1 = layers.LSTM(32,input_shape=(3, 144),return_sequences=True)(flat)


LSTM2 = layers.LSTM(32,input_shape=(3, 32),return_sequences=True)(LSTM1)

flat = layers.Flatten()(LSTM2)

out_layer = layers.Dense(6, activation='softmax')(flat)

myModel_RCNN = Model(myInput, out_layer)

myModel_RCNN.summary()

myModel_RCNN.compile(optimizer=keras.optimizers.SGD(lr=0, momentum=0.9, decay=0, nesterov=False), loss=keras.losses.categorical_crossentropy, metrics=['accuracy'])
